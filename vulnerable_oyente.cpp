#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <filesystem>

using namespace std;
namespace fs = std::filesystem;

bool isContractVulnerable(const std::string& output) {
    // Define the vulnerability indicators
    std::vector<std::string> vulnerabilities = {
        "Integer Underflow: True",
        "Integer Overflow: True",
        "Parity Multisig Bug 2: True",
        "Callstack Depth Attack Vulnerability: True",
        "Transaction-Ordering Dependence (TOD): True",
        "Timestamp Dependency: True",
        "Re-Entrancy Vulnerability: True"
    };

    for (const auto& vulnerability : vulnerabilities) {
        if (output.find(vulnerability) != std::string::npos) {
            return true;
        }
    }
    
    return false;
}

int main() {
    string directory = "./output"; // Set the directory path here
    vector<string> contractFiles;

    // Iterate through the directory to find all .sol files
    for (const auto& entry : fs::directory_iterator(directory)) {
        if (entry.path().extension() == ".sol") {
            contractFiles.push_back(entry.path().string());
        }
    }

    int vulnerableCount = 0;
    int analyzedCount = 0;

    for (size_t i = 0; i < contractFiles.size(); ++i) {
        const string& file = contractFiles[i];

        string command = "python oyente.py -s " + file + " > temp_output.txt ";
        system(command.c_str());

        ifstream inputFile("temp_output.txt");
        string line, output;
        
        if (inputFile.is_open()) {
            while (getline(inputFile, line)) {
                output += line + "\n";
            }
            inputFile.close();

            if (isContractVulnerable(output)) {
                vulnerableCount++;
            }
        }

        analyzedCount++;
        cout << analyzedCount << "/" << contractFiles.size() << " files analyzed." << endl;
    }

    cout << vulnerableCount << "/" << contractFiles.size() << " are vulnerable." << endl;

    // Clean up
    fs::remove("temp_output.txt");

    return 0;
}