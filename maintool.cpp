#include <iostream>
#include <cstdlib>
#include <filesystem>  

using namespace std;
namespace fs = std::filesystem;

void runAndPrint(const string& filename) {

    string exeName = filename.substr(0, filename.find_last_of('.'));

    // Compile the C++ file
    string compileCommand = "g++ " + filename + " -o " + exeName;
    if (system(compileCommand.c_str()) != 0) {
        cerr << "Compilation failed for " << filename << endl;
        return;
    }

    // Execute the compiled output
    cout<<"Execution of "<<filename<<endl;

    string executeCommand = "./" + exeName;

    if (system(executeCommand.c_str()) != 0) {
        cerr << "Execution failed for " << filename << endl;
        return;
    }

    // Print the file name after successful execution
    cout << filename << " executed successfully." << endl;
}

int countFilesInDirectory(const string& directory) {
    int fileCount = 0;
    for (const auto& entry : fs::directory_iterator(directory)) {
        if (entry.is_regular_file()) {
            ++fileCount;
        }
    }
    return fileCount;
}

int main() {
    string filenames[] = {"vulnerable_slither.cpp", "vulnerable_mythril.cpp", "vulnerable_securify.cpp", "vulnerable_oyente.cpp"};

    for (const auto& filename : filenames) {
        runAndPrint(filename);
    }

    string safe_contracts = "./not_vulnerable_contracts";
    int numberOfSafeFiles = countFilesInDirectory(safe_contracts);

    string totalContracts = "./output";
    int totalFiles = countFilesInDirectory(totalContracts);

    cout<<"Total Files Vulnerable are: "<<totalFiles - numberOfSafeFiles << "/"<<totalFiles<<endl;
    
    return 0;
}