#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <filesystem>

using namespace std;
namespace fs = std::filesystem;

bool isContractVulnerable(const string& output) {
    bool hasHighIssues = false;
    size_t posHigh = output.find("| High | ");

    if (posHigh != string::npos) {
       
        size_t start = posHigh + 9; 
        size_t end = output.find(" |", start); 
        if (end != string::npos) {
            
            int highIssues = stoi(output.substr(start, end - start));
            if (highIssues > 0) {
                hasHighIssues = true;
            }
        }
    }
    
    return hasHighIssues;
}

// Function to delete the contract from non_vulnerable_contracts if found vulnerable
void deleteVulnerableFile(const string& file) {
    string targetDirectory = "non_vulnerable_contracts";
    string targetFile = targetDirectory + "/" + fs::path(file).filename().string();

    if (fs::exists(targetFile)) {
        fs::remove(targetFile);
        cout << "Vulnerable file deleted from: " << targetFile << endl;
    } else {
        cout << "File not found in non_vulnerable_contracts: " << targetFile << endl;
    }
}

int main() {
    string directory = "./non_vulnerable_contracts"; // Set the directory path here
    vector<string> contractFiles;

    // Iterate through the directory to find all .sol files
    for (const auto& entry : fs::directory_iterator(directory)) {
        if (entry.path().extension() == ".sol") {
            contractFiles.push_back(entry.path().string());
        }
    }

    int vulnerableCount = 0;
    int analyzedCount = 0;

    for (size_t i = 0; i < contractFiles.size(); ++i) {
        const string& file = contractFiles[i];

        string command = "aderyn -s " + file + " > temp_output2.txt";
//       cout << command << endl;
        system(command.c_str());
        
        ifstream inputFile("report.md");
        string line, output;
        
        if (inputFile.is_open()) {
            while (getline(inputFile, line)) {
                output += line + "\n";
            }
            inputFile.close();

            if (isContractVulnerable(output)) {
                vulnerableCount++;
                deleteVulnerableFile(file); // Delete if found vulnerable
            }
        }

        analyzedCount++;
        cout << analyzedCount << "/" << contractFiles.size() << " files analyzed." << endl;
    }

    cout << vulnerableCount << "/" << contractFiles.size() << " are vulnerable." << endl;

    
    fs::remove("temp_output.txt");

    return 0;
}